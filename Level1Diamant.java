
import greenfoot.*;  // (World, Actor, GreenfootImage, Greenfoot and MouseInfo)

/**
 *
 * @author R. Springer
 */
public class Level1Diamant extends World {

    private CollisionEngine ce;

    /**
     * Constructor for objects of class Level1Diamant.s
     *
     */
    public Level1Diamant() {
        // Create a new world with 600x400 cells with a cell size of 1x1 pixels.
        super(1000, 800, 1, false);
        this.setBackground("BackGround.png");

        int[][] map = {
            {19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
            {19, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, 208, -1, 19},
            {19, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, 208, -1, 19},
            {19, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, 208, -1, 19},
            {19, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, 208, -1, 19},
            {19, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, 208, -1, 19},
            {19, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, 208, -1, 19},
            {19, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, 208, -1, 19},
            {19, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, 208, -1, 19},
            {19, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, 208, -1, 19},
            {19, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, 208, -1, 19},
            {19, -1, -1, -1, -1, -1, 183, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, 208, -1, 19},
            {19, -1, -1, -1, 35, 36, 37, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, 208, -1, 19},
            {19, -1, -1, -1, -1, 208, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 183, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, 208, -1, 19},
            {19, 183, -1, -1, -1, 208, -1, -1, -1, -1, 208, -1, -1, -1, -1, 183, -1, -1, 183, -1, -1, -1, -1, -1, 26, 28, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, 208, -1, 19},
            {19, 21, 23, -1, -1, 208, -1, -1, -1, -1, 208, -1, -1, 26, 36, 36, 36, 36, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, 19},
            {19, -1, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, 208, -1, -1, -1, -1, 26, 28, -1, -1, -1, -1, -1, 26, 28, -1, -1, 183, -1, -1, -1, 26, 28, -1, -1, -1, 208, -1, 19},
            {19, -1, -1, -1, -1, -1, 183, -1, -1, -1, 208, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, 28, -1, -1, -1, -1, 183, -1, -1, -1, -1, 19},
            {19, -1, -1, -1, -1, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, 208, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 183, -1, -1, -1, -1, -1, -1, -1, -1, 26, 28, -1, -1, -1, 19},
            {19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, 36, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19},
            {19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 183, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 19},
            {19, 21, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 183, -1, -1, -1, -1, 22, 36, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19},
            {19, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, 183, -1, -1, 22, 36, 24, -1, -1, -1, 19, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, 28, -1, -1, 19},
            {19, 183, -1, -1, 58, -1, 183, -1, 128, -1, -1, 22, 36, 24, -1, -1, -1, 19, -1, -1, -1, -1, 19, -1, -1, 19, -1, 36, -1, -1, -1, 183, -1, -1, -1, -1, -1, 127, -1, 183, -1, -1, 19},
            {19, 36, -1, 36, 36, 36, 36, 36, 36, 36, 36, 36, 19, 92, 92, 92, 92, 19, -1, -1, -1, -1, 19, 92, 92, 19, 92, 19, 36, -1, 36, 36, 36, 36, 36, -1, -1, 36, 36, 36, 36, 36, 19},
            {19, 19, -1, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 90, 90, 90, 90, 19, 92, 92, 92, 92, 19, 90, 90, 19, 90, 19, 19, -1, 19, 19, 19, 19, -1, -1, 19, 19, 19, 19, 19, 19, 19},
            {19, 19, -1, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 90, 90, 90, 90, 19, 90, 90, 90, 90, 19, 90, 90, 19, 19, 19, 19, -1, 19, 19, 19, -1, 183, 19, 19, 19, 19, 19, 19, 19, 19},
            {19, 19, -1, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 90, 90, 90, 90, 19, 90, 90, 90, 90, 19, 90, 19, 19, -1, -1, -1, -1, -1, 19, -1, -1, 19, 19, 19, 19, 19, 19, 19, 19, 19},
            {19, 19, -1, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 90, 90, 90, 90, 19, 90, 90, 90, 90, 19, 19, 19, -1, -1, 19, -1, -1, -1, -1, -1, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
            {19, 19, -1, 19, 19, 19, 19, -1, 208, -1, 183, -1, 19, 90, 90, 90, 90, 19, 90, 90, 90, 90, 19, 19, -1, 183, 19, 19, -1, 183, -1, 183, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
            {19, 19, -1, -1, 183, -1, -1, -1, -1, -1, 19, 19, 19, 90, 90, 90, 90, 19, 90, 90, 90, 19, 19, -1, -1, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
            {19, 19, 19, 19, 19, 19, 19, 19, 19, -1, -1, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, -1, -1, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
            {19, 19, 19, 19, 19, 19, 19, 19, 19, 19, -1, -1, 183, -1, -1, -1, -1, -1, -1, 208, -1, -1, 183, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
            {19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 17, 17, 17, 17, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},};
        // Declareren en initialiseren van de TileEngine klasse om de map aan de world toe te voegen
        TileEngine te = new TileEngine(this, 70, 70, map);
        // Declarenre en initialiseren van de camera klasse met de TileEngine klasse 
        // zodat de camera weet welke tiles allemaal moeten meebewegen met de camera
        Camera camera = new Camera(te);
        // Declareren en initialiseren van een main karakter van het spel mijne heet Hero. Deze klasse 
        // moet de klasse Mover extenden voor de camera om te werken
        Hero hero = new Hero();

        // Laat de camera een object volgen. Die moet een Mover instatie zijn of een extentie hiervan.
        camera.follow(hero);

        // Alle objecten toevoegen aan de wereld: camera, main karakter en mogelijke enemies
        addObject(camera, 0, 0);
        addObject(hero, 522, 1635);

        //Hier add je alle objecten.
        addObject(new BlauweMunt(), 1167, 1010);
        addObject(new RozeMunt(), 1995, 2070);
        //addObject(new GroeneMunt(), 2355, 1930);

        addObject(new Ster(), 1861, 1911);
        addObject(new Ster(), 384, 795);
        addObject(new Ster(), 2513, 1080);
        
        addObject(new KeyBlue(), 797, 2070);
        //Hier add ik alle enemies

        // De collision engine kijkt alleen naar de tiles die de variabele solid op true hebben staan.
        ce = new CollisionEngine(te, camera);
        // Toevoegen van de mover instantie of een extentie hiervan
        ce.addCollidingMover(hero);
    }

    @Override
    public void act() {
        ce.update();
    }
}
